@using CarCareTracker.Helper
@inject IConfigHelper config
@inject ITranslationHelper translator
@model GasRecordInputContainer
@{
    var userConfig = config.GetUserConfig(User);
    var useMPG = userConfig.UseMPG;
    var useUKMPG = userConfig.UseUKMPG;
    var userLanguage = userConfig.UserLanguage;
    var useKwh = Model.UseKwh;
    var useHours = Model.UseHours;
    var isNew = Model.GasRecord.Id == 0;
    string consumptionUnit;
    string distanceUnit;
    if (useKwh)
    {
        consumptionUnit = "kWh";
    } else if (useUKMPG)
    {
        consumptionUnit = @translator.Translate(userLanguage, "liters");
    }
    else
    {
        consumptionUnit = useMPG ? @translator.Translate(userLanguage, "gallons") : @translator.Translate(userLanguage, "liters");
    }
    if (useHours)
    {
        distanceUnit = @translator.Translate(userLanguage, "hours");
    }
    else if (useUKMPG)
    {
        distanceUnit = @translator.Translate(userLanguage, "miles");
    }
    else
    {
        distanceUnit = useMPG ? @translator.Translate(userLanguage, "miles") : @translator.Translate(userLanguage, "kilometers");
    }


    string labelAddNewRecord = useKwh ? translator.Translate(userLanguage, "Add New Charging Record") : translator.Translate(userLanguage, "Add New Gas Record");
    string labelEditRecord = useKwh ? translator.Translate(userLanguage, "Edit Charging Record") : translator.Translate(userLanguage, "Edit Gas Record");
    string labelDateRefueled = useKwh ? translator.Translate(userLanguage, "Date charged") : translator.Translate(userLanguage, "Date refueled");
    string labelOdometerReading = useKwh ? translator.Translate(userLanguage, "Odometer reading when charged") : translator.Translate(userLanguage, "Odometer reading when refueled");
    string labelConsumption = useKwh ? translator.Translate(userLanguage, "Energy Consumption") : translator.Translate(userLanguage, "Fuel Consumption");
    string labelAmountRefueled = useKwh ? translator.Translate(userLanguage, "Amount of energy charged") : translator.Translate(userLanguage, "Amount of gas refueled");
    string labelIsFull = useKwh ? translator.Translate(userLanguage, "Is fully charged") : translator.Translate(userLanguage, "Is Filled To Full");
    string labelMissedFuelUp = useKwh ? translator.Translate(userLanguage, "Missed Charge (Skip Efficiency Calculation)") : translator.Translate(userLanguage, "Missed Fuel Up (Skip MPG Calculation)");
    string labelCostFuel = useKwh ? translator.Translate(userLanguage, "Cost of charging") : translator.Translate(userLanguage, "Cost of gas refueled");
}

<div class="modal-header">
    <h5 class="modal-title">@(isNew ? labelAddNewRecord : labelEditRecord)<small style="display:none; @(isNew ? "" : "cursor:pointer;")" class="cached-banner ms-2 text-warning" onclick='@(isNew ? "" : $"showEditGasRecordModal({Model.GasRecord.Id}, true)" )'>@translator.Translate(userLanguage, "Unsaved Changes")</small></h5>
    <button type="button" class="btn-close" onclick="hideAddGasRecordModal()" aria-label="Close"></button>
</div>
<div class="modal-body">
    <form>
        <div class="form-group">
            <div class="row">
                <div class="col-md-6 col-12">
                    <input type="text" id="workAroundInput" style="height:0px; width:0px; display:none;">
                    <label for="gasRecordDate">@translator.Translate(userLanguage,"Date")</label>
                    <div class="input-group">
                        <input type="text" id="gasRecordDate" placeholder="@labelDateRefueled" class="form-control" value="@Model.GasRecord.Date">
                        <span class="input-group-text"><i class="bi bi-calendar-event"></i></span>
                    </div>
                    <label for="gasRecordMileage">@($"{translator.Translate(userLanguage,"Odometer Reading")}({distanceUnit})")</label>
                    <div class="input-group">
                        <input type="number" inputmode="numeric" id="gasRecordMileage" class="form-control" placeholder="@labelOdometerReading" value="@(isNew ? "" : Model.GasRecord.Mileage)">
                        @if (isNew)
                        {
                            <div class="input-group-text">
                                <button type="button" class="btn btn-sm btn-primary zero-y-padding" onclick="getLastOdometerReadingAndIncrement('gasRecordMileage')"><i class="bi bi-plus"></i></button>
                            </div>
                        }
                    </div>
                    <label for="gasRecordGallons">@($"{labelConsumption}({consumptionUnit})")</label>
                    <input type="text" inputmode="decimal" id="gasRecordGallons" class="form-control" placeholder="@labelAmountRefueled" value="@(isNew ? "" : Model.GasRecord.Gallons)">
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" role="switch" id="gasIsFillToFull" checked="@Model.GasRecord.IsFillToFull">
                        <label class="form-check-label" for="gasIsFillToFull">@labelIsFull</label>
                    </div>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" role="switch" id="gasIsMissed" checked="@Model.GasRecord.MissedFuelUp">
                        <label class="form-check-label" for="gasIsMissed">@labelMissedFuelUp</label>
                    </div>
                    <label for="GasRecordCost">@translator.Translate(userLanguage,"Cost")</label>
                    @if (isNew)
                    {
                        <div class="input-group">
                            <input type="text" inputmode="decimal" id="gasRecordCost" class="form-control" placeholder="@labelCostFuel" value="@(isNew ? "" : Model.GasRecord.Cost)">
                            <div class="input-group-text">
                                <select class="form-select form-select-sm" id="gasCostType">
                                    <option value="total">@translator.Translate(userLanguage,"Total")</option>
                                    <option value="unit">@translator.Translate(userLanguage,"Unit")</option>
                                </select>
                            </div>
                        </div>
                    } else
                    {
                        <input type="text" inputmode="decimal" id="gasRecordCost" class="form-control" placeholder="@labelCostFuel" value="@(isNew ? "" : Model.GasRecord.Cost)">
                    }
                    <label for="gasRecordTag">@translator.Translate(userLanguage,"Tags(optional)")</label>
                    <select multiple class="form-select" id="gasRecordTag">
                        @foreach (string tag in Model.GasRecord.Tags)
                        {
                            <!option value="@tag">@tag</!option>
                        }
                    </select>
                    @foreach (ExtraField field in Model.GasRecord.ExtraFields)
                    {
                        var elementId = Guid.NewGuid();
                        <div class="extra-field">
                            <label for="@elementId">@field.Name</label>
                            <input type="text" id="@elementId" class="form-control @(field.IsRequired ? "extra-field-required" : "")" placeholder="@field.Name" value="@field.Value">
                        </div>
                    }
                </div>
                <div class="col-md-6 col-12">
                    <label for="gasRecordNotes">@translator.Translate(userLanguage,"Notes(optional)")<a class="link-underline link-underline-opacity-0" onclick="showLinks(this)"><i class="bi bi-markdown ms-2"></i></a></label>
                    <textarea id="gasRecordNotes" class="form-control" rows="5">@Model.GasRecord.Notes</textarea>
                    @if (Model.GasRecord.Files.Any())
                    {
                        <div>
                            @await Html.PartialAsync("_UploadedFiles", Model.GasRecord.Files)
                            <label for="gasRecordFiles">@translator.Translate(userLanguage,"Upload more documents")</label>
                            <input onChange="uploadVehicleFilesAsync(this)" type="file" multiple accept="@config.GetAllowedFileUploadExtensions()" class="form-control-file" id="gasRecordFiles">
                            <br /><small class="text-body-secondary">@translator.Translate(userLanguage,"Max File Size: 28.6MB")</small>
                        </div>
                    }
                    else
                    {
                        <label for="gasRecordFiles">@translator.Translate(userLanguage,"Upload documents(optional)")</label>
                        <input onChange="uploadVehicleFilesAsync(this)" type="file" multiple accept="@config.GetAllowedFileUploadExtensions()" class="form-control-file" id="gasRecordFiles">
                        <br /><small class="text-body-secondary">@translator.Translate(userLanguage,"Max File Size: 28.6MB")</small>
                    }
                    <div id="filesPendingUpload"></div>
                </div>
            </div>
        </div>
    </form>
</div>
<div class="modal-footer">
    @if (!isNew)
    {
        <button type="button" class="btn btn-danger" onclick="deleteGasRecord(@Model.GasRecord.Id)" style="margin-right:auto;">@translator.Translate(userLanguage,"Delete")</button>
    }
    <button type="button" class="btn btn-secondary" onclick="hideAddGasRecordModal()">@translator.Translate(userLanguage,"Cancel")</button>
    @if (isNew)
    {
        <button type="button" class="btn btn-primary" onclick="saveGasRecordToVehicle()">@labelAddNewRecord</button>
    }
    else if (!isNew)
    {
        <button type="button" class="btn btn-primary" onclick="saveGasRecordToVehicle(true)">@labelEditRecord</button>
    }
</div>
<script>
    var uploadedFiles = [];
    getUploadedFilesFromModel();
    function getUploadedFilesFromModel() {
    @foreach (UploadedFiles filesUploaded in Model.GasRecord.Files)
    {
        @:uploadedFiles.push({ name: "@filesUploaded.Name", location: "@filesUploaded.Location" });
    }
    }
    function getGasRecordModelData(){
        return { id: @Model.GasRecord.Id}
    }
</script>
